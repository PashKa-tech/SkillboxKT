import time
import re
import json
import sqlite3
import threading
from datetime import datetime, timedelta
from db import get_connection

def matches_period(days_left: int, period: str) -> bool:
    mapping = {
        "–∑–∞ 2 –Ω–µ–¥–µ–ª–∏ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞": 14,
        "–∑–∞ 1 –Ω–µ–¥–µ–ª—é –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞": 7,
        "–∑–∞ 1 –¥–µ–Ω—å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞": 1,
        "–≤ –¥–µ–Ω—å –¥–µ–¥–ª–∞–π–Ω–∞": 0
    }
    if period == "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å":
        return days_left >= 0
    return days_left == mapping.get(period, -999)

def parse_gmt_offset(chaspoy: str) -> int:
    m = re.match(r'GMT\s*([+-])\s*(\d{1,2})', chaspoy or "")
    if not m:
        return 0
    sign, hours = m.groups()
    return int(hours) * (1 if sign == '+' else -1)

def is_time_on_half_hour(dt: datetime) -> bool:
    return dt.minute % 30 == 0

def check_and_send_notifications(bot):
    now_utc = datetime.utcnow()
    print(f"[{now_utc.isoformat()} UTC] ‚Üí –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

    if not is_time_on_half_hour(now_utc):
        print(f"[{now_utc.isoformat()} UTC] –í—Ä–µ–º—è –Ω–µ –∫—Ä–∞—Ç–Ω–æ 30 –º–∏–Ω—É—Ç–∞–º, –ø—Ä–æ–ø—É—Å–∫")
        return

    conn = get_connection()
    cursor = conn.cursor()

    cursor.execute("""
        CREATE TABLE IF NOT EXISTS sent_notifications (
            tgid TEXT,
            course TEXT,
            period TEXT,
            date_sent TEXT
        )
    """)
    conn.commit()

    cursor.execute("SELECT name, timekt FROM courses")
    courses = cursor.fetchall()
    print(f"[{now_utc.isoformat()}] –ö—É—Ä—Å–æ–≤ –≤ –ë–î: {len(courses)}")

    cursor.execute("SELECT tgid, settings FROM users")
    users = cursor.fetchall()
    print(f"[{now_utc.isoformat()}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: {len(users)}")

    for tgid, settings_str in users:
        try:
            settings = json.loads(settings_str) if settings_str not in (None, "", "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ") else {}
        except json.JSONDecodeError:
            settings = {}
            print(f"  [!] –û—à–∏–±–∫–∞ JSON –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tgid}. –ò—Å–ø–æ–ª—å–∑—É—é –ø—É—Å—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

        offset = parse_gmt_offset(settings.get("chaspoy", ""))
        now_local = now_utc + timedelta(hours=offset)
        local_time_str = now_local.strftime("%Y-%m-%d %H:%M:%S")
        print(f"  ‚Üí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tgid}: GMT offset {offset:+d}, –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è {local_time_str}")

        target_time = settings.get("timenap")
        if target_time != now_local.strftime("%H:%M"):
            print(f"    ‚Äî –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π {target_time}, —Å–µ–π—á–∞—Å {now_local.strftime('%H:%M')}")
            continue

        notifyon = set(settings.get("notifyon", []))
        periods = settings.get("notifysettingson", [])
        print(f"    ‚Äî –ü–æ–¥–ø–∏—Å–∫–∏: –∫—É—Ä—Å—ã={notifyon}, –ø–µ—Ä–∏–æ–¥—ã={periods}")

        for name, timekt in courses:
            if name not in notifyon:
                continue

            try:
                course_date = datetime.strptime(timekt, "%d.%m.%Y").date()
            except ValueError:
                print(f"    [!] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã K–¢ –¥–ª—è –∫—É—Ä—Å–∞ ¬´{name}¬ª: {timekt}")
                continue

            days_left = (course_date - now_local.date()).days
            print(f"    ‚Äî –ö—É—Ä—Å ¬´{name}¬ª: –æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω. (–¥–µ–¥–ª–∞–π–Ω {course_date.isoformat()})")

            for period in periods:
                if not matches_period(days_left, period):
                    print(f"      ‚Ä¢ –ü–µ—Ä–∏–æ–¥ ¬´{period}¬ª –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç (—Ç—Ä–µ–±—É–µ—Ç—Å—è {period}, –æ—Å—Ç–∞–ª–æ—Å—å {days_left})")
                    continue

                date_sent = now_local.date().isoformat()
                cursor.execute(
                    "SELECT 1 FROM sent_notifications WHERE tgid=? AND course=? AND period=? AND date_sent=?",
                    (tgid, name, period, date_sent)
                )
                if cursor.fetchone():
                    print(f"      ‚Ä¢ –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è ({date_sent}) –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ ¬´{period}¬ª")
                    continue

                print(f"      ‚Ä¢ –û–¢–ü–†–ê–í–õ–Ø–Æ [{tgid}] ¬´{name}¬ª, –ø–µ—Ä–∏–æ–¥ ¬´{period}¬ª")
                try:
                    bot.send_message(
                        tgid,
                        f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ ¬´{name}¬ª: –¥–æ –ö–¢ –æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω. (–ø–µ—Ä–∏–æ–¥ ¬´{period}¬ª)"
                    )
                except Exception as e:
                    print(f"      [!] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tgid}: {e}")
                else:
                    cursor.execute(
                        "INSERT INTO sent_notifications (tgid, course, period, date_sent) VALUES (?, ?, ?, ?)",
                        (tgid, name, period, date_sent)
                    )
                    conn.commit()

    cutoff = (now_utc.date() - timedelta(days=2)).isoformat()
    cursor.execute("DELETE FROM sent_notifications WHERE date_sent < ?", (cutoff,))
    conn.commit()
    print(f"[{now_utc.isoformat()}] –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ {cutoff}")

    conn.close()
    print(f"[{now_utc.isoformat()} UTC] ‚Üê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n")

def start_notification_loop(bot):
    def _worker():
        print(f"[{datetime.utcnow().isoformat()} UTC] ‚Äî –ü–æ—Ç–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É")
        try:
            check_and_send_notifications(bot)
        except Exception as e:
            print(f"[{datetime.utcnow().isoformat()} UTC] [ERROR] {e}")
            import traceback
            traceback.print_exc()
        finally:
            now = datetime.utcnow()
            next_minute = 30 if now.minute < 30 else 60
            next_time = now.replace(minute=next_minute % 60, second=0, microsecond=0)
            if next_minute == 60:
                next_time += timedelta(hours=1)
            sleep_seconds = (next_time - now).total_seconds()
            print(f"[{now.isoformat()} UTC] ‚Äî –ó–∞—Å—ã–ø–∞—é –¥–æ {next_time.isoformat()} UTC ({int(sleep_seconds)} —Å–µ–∫)\n")
            time.sleep(sleep_seconds)
            _worker()

    print(f"[{datetime.utcnow().isoformat()} UTC] ‚Üí –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    threading.Thread(target=_worker, daemon=True).start()

def register_handlers(bot):
    start_notification_loop(bot)
